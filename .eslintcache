[{"E:\\Project\\ColorPickerTest\\color-picker\\src\\index.js":"1","E:\\Project\\ColorPickerTest\\color-picker\\src\\reportWebVitals.js":"2","E:\\Project\\ColorPickerTest\\color-picker\\src\\App.js":"3"},{"size":500,"mtime":1608257016314,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1608257016314,"results":"6","hashOfConfig":"5"},{"size":8399,"mtime":1620955055909,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"e7snnq",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"E:\\Project\\ColorPickerTest\\color-picker\\src\\index.js",[],["16","17"],"E:\\Project\\ColorPickerTest\\color-picker\\src\\reportWebVitals.js",[],"E:\\Project\\ColorPickerTest\\color-picker\\src\\App.js",["18","19","20","21","22","23"],"import React, { useEffect, useState, useRef } from 'react';\nimport { Col, Row, Button } from \"reactstrap\";\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image';\nimport { SketchPicker } from 'react-color';\nimport anime from \"animejs/lib/anime.es.js\";\n\nimport testImage from './assets/hero1.png'\n\nexport const transitionTypes = [\n  {\n    // 0\n    name: \"fade\",\n    animation: {\n      opacity: [0.1, 1],\n      // direction: 'alternate',\n    },\n  },\n  {\n    // 1\n    name: \"fadeUp\",\n    animation: {\n      opacity: [0.1, 1],\n      scale: [0.5, 1],\n      translateY: [+500, 0],\n    },\n  },\n  {\n    // 2\n    name: \"slide\",\n    animation: {\n      translateX: [-500, 0],\n    },\n  },\n  {\n    // 3\n    name: \"slideUp\",\n    animation: {\n      translateY: [+500, 0],\n    },\n  },\n  {\n    // 4\n    name: \"rotate\",\n    animation: {\n      scale: [0.5, 1],\n      rotate: [\"+=1turn\"], //\n    },\n  },\n  {\n    // 5\n    name: \"rotateX\",\n    animation: {\n      scale: [0.2, 1],\n      rotateX: \"+=2turn\", //\n    },\n  },\n  {\n    // 6\n    name: \"rotateY\",\n    animation: {\n      scale: [0.2, 1],\n      rotateY: \"+=2turn\", //\n    },\n  },\n  {\n    // 7\n    name: \"zoom\",\n    animation: {\n      scale: [0.1, 1],\n      opacity: [0.7, 1],\n    },\n  },\n  {\n    // 8\n    name: \"flash\",\n    animation: {\n      opacity: [0.2, 0.7, 0.3, 1],\n    },\n  },\n  {\n    // 9\n    name: \"plus\",\n    animation: {\n      scale: [0.9, 1.3, 1],\n    },\n  },\n  {\n    // 10\n    name: \"bounce\",\n    animation: {\n      translateY: [-350, 0],\n      easing: \"spring(1, 80, 10, 0)\",\n    },\n  },\n  {\n    // 11\n    name: \"rubber\",\n    animation: {\n      scaleX: [1, 1.2, 0.95, 1],\n      scaleY: [1, 0.8, 1.1, 1],\n    },\n  },\n  {\n    // 12\n    name: \"tada\",\n    animation: {\n      scale: [1, 0.9, 1, 1, 1],\n      rotate: [\n        \"+=0turn\",\n        \"+=0.05turn\",\n        \"-=0.1turn\",\n        \"+=0.07turn\",\n        \"-=0.02turn\",\n      ], //\n      // skew: ['0','-20','0'],\n    },\n  },\n  {\n    // 13\n    name: \"skew\",\n    animation: {\n      skewY: [\"-40\", \"+40\", 0],\n    },\n  },\n];\n\nfunction App() {\n  const imageRef = useRef(null);\n  const layerRef = useRef(null);\n  const [image] = useImage(testImage);\n  const [targetColor, setTargetColor] = useState('#fff');\n  const [targetColorRGB, setTargetColorRGB] = useState([]);\n  const [newColor, setNewColor] = useState('#fff');\n  const [newColorRGB, setNewColorRGB] = useState([]);\n  const [oldImgData, setOldImgData] = useState([]);\n  const [transitionType, setTransitionType] = useState(0);\n  const [transitionDuration, setTransitionDuration] = useState(1000);\n  const [annoyingAnimation, setAnnoyingAnimation] = useState(false);\n\n  useEffect(() => {    \n    function getRelativePointerPosition(node) {\n      var transform = node.getAbsoluteTransform().copy();\n      // to detect relative position we need to invert transform\n      transform.invert();\n\n      // get pointer (say mouse or touch) position\n      var pos = node.getStage().getPointerPosition();\n\n      // now we can find relative point\n      return transform.point(pos);\n    }\n\n    imageRef.current.on('mouseup', function () {\n      const imageCanvas = imageRef.current.getCanvas();\n      const context = imageRef.current.getContext();\n      const pos = getRelativePointerPosition(this);\n      const imgData = context.getImageData(pos.x,pos.y,1,1).data;\n      setTargetColorRGB(imgData);    \n      let red = imgData[0].toString(16);\n      red = red.length > 1 ? red : '0' + red ;\n      let green = imgData[1].toString(16);\n      green = green.length > 1 ? green : '0' + green ;\n      let blue = imgData[2].toString(16);\n      blue = blue.length > 1 ? blue : '0' + blue ;\n      setTargetColor(`#${red}${green}${blue}`);\n\n    });\n   \n  }, []);\n\n  console.log('targetColor=>', targetColor);\n  console.log('targetColorRGB=>', targetColorRGB);\n  console.log('newColor=>', newColor);\n  console.log('newColorRGB=>', newColorRGB);\n  console.log('oldImgData=>', oldImgData);\n\n  const handleChangeComplete = (color) => {    \n    setNewColorRGB(color.rgb);\n    setNewColor(color.hex);\n  };\n\n  const handleClickReplace = (e) => {\n    const imageCanvas = imageRef.current.getCanvas();\n    const context = imageRef.current.getContext();\n    const imgData = context.getImageData(0, 0, imageCanvas.width, imageCanvas.height);\n    // console.log('imgData=>', imgData);\n    // setOldImgData(imgData.data);\n    let oldImage = [];\n    if (newColor && targetColorRGB) {\n      for (let i = 0; i < imgData.data.length; i += 4) {\n        oldImage = imgData.data[0]\n        if( imgData.data[i] === targetColorRGB[0] &&\n        imgData.data[i + 1] === targetColorRGB[1] &&\n        imgData.data[i + 2]  === targetColorRGB[2]) {\n          imgData.data[i] = newColorRGB.r;\n          imgData.data[i + 1] = newColorRGB.g;\n          imgData.data[i + 2] = newColorRGB.b;\n          imgData.data[i + 3] = 255;\n        }\n      }\n      context.putImageData(imgData, 0, 0);\n    }\n  }\n  const handleClickUndo = (e) => {\n    const imageCanvas = imageRef.current.getCanvas();\n    const context = imageRef.current.getContext();\n    const imgData = context.getImageData(0, 0, imageCanvas.width, imageCanvas.height);\n    for (let i = 0; i < imgData.data.length; i += 4) {\n      imgData.data[i] = oldImgData[i];\n      imgData.data[i + 1] = oldImgData[i + 1];\n      imgData.data[i + 2] = oldImgData[i + 2];\n      imgData.data[i + 3] = 255;\n    }\n    context.putImageData(imgData, 0, 0);\n\n  }\n  const applyPanoramaAnnoying = () => {\n    const canvasEl = document.getElementById(\"text\");\n      console.log('annoyingAnimation=>', transitionType)\n    if (canvasEl) {\n      // if (annoyingAnimation) {\n      //   annoyingAnimation.restart();\n      //   return;\n      // }\n      const annoyingAnimation1 = transitionType\n        ? anime({\n            targets: canvasEl,\n            easing: \"easeInOutSine\",\n            duration: transitionDuration,\n            ...transitionTypes[transitionType].animation,\n          })\n        : anime({\n            targets: canvasEl,\n            duration: 1000,\n            easing: \"easeInOutSine\",\n            ...transitionTypes[0].animation,\n          });\n      annoyingAnimation1.restart();\n      setAnnoyingAnimation(annoyingAnimation1);\n      setTransitionType(Math.floor(Math.random() * 12))\n    }\n  };\n  const handleAnimation = (e) => {\n    applyPanoramaAnnoying()\n  }\n  return (\n    <React.Fragment>\n      <Col sm={12} className=\"container\">\n        <Row  className=\"container d-flex\" style={{ display: 'flex',justifyContent: 'center', marginTop: '50px'}}>\n          <Col sm={10} style={{border: '2px solid #f3ac25', borderRadius: 5, cursor:'pointer'}}>\n            <Stage width={500} height={300}>\n              <Layer ref={layerRef}>\n                <Image ref={imageRef} image={image} />\n              </Layer>\n            </Stage>\n          </Col>\n          <Col sm={2} className=\"d-flex\" style={{ display: 'flex'}}>\n            <Row style={{ display: 'flex', flexDirection: 'column'}}>\n              <div style={{border: '1px solid', margin: '20px 50px 20px 60px', width: 100, height: 100, backgroundColor: targetColor }} />\n              <p style={{marginLeft: 70}} >Target Color</p>\n              <Button style={{ margin: '20px 50px 20px 65px', width: 100}} onClick={handleClickReplace}>Replace</Button>\n            {/* <Button className=\"w-100\" onClick={handleClickUndo}>Undo</Button> */}\n            </Row>\n            <Row style={{ display: 'flex', flexDirection: 'column'}}>\n              <SketchPicker \n                color={ newColor }\n                onChangeComplete={ handleChangeComplete }\n              />\n              <p style={{marginLeft: 60}} >New Color</p>          \n            </Row>\n          </Col>\n        </Row>\n        <Row  className=\"container d-flex\" style={{position:'relative', display: 'flex', flexDirection: \"column\", alignItems:\"center\", justifyContent: 'center', marginTop: '50px'}}>\n        <video id=\"myVideo\" width=\"320\" height=\"240\" controls crossOrigin=\"true\">\n          <source src=\"sample-mp4-file.mp4\" type=\"video/mp4\" />\n        </video>\n        <div id=\"text\" style={{position:'absolute', top:'30%', left: '47%', color: 'yellow', fontSize: 30}} >\n          Test Text\n        </div>\n        <Button style={{ margin: '20px 50px 20px 65px', width: 100}} onClick={handleAnimation}>Text animation</Button>\n        </Row>\n      </Col>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":136,"column":22,"nodeType":"30","messageId":"31","endLine":136,"endColumn":35},{"ruleId":"28","severity":1,"message":"32","line":138,"column":30,"nodeType":"30","messageId":"31","endLine":138,"endColumn":51},{"ruleId":"28","severity":1,"message":"33","line":139,"column":10,"nodeType":"30","messageId":"31","endLine":139,"endColumn":27},{"ruleId":"28","severity":1,"message":"34","line":155,"column":13,"nodeType":"30","messageId":"31","endLine":155,"endColumn":24},{"ruleId":"28","severity":1,"message":"35","line":192,"column":9,"nodeType":"30","messageId":"31","endLine":192,"endColumn":17},{"ruleId":"28","severity":1,"message":"36","line":205,"column":9,"nodeType":"30","messageId":"31","endLine":205,"endColumn":24},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'setOldImgData' is assigned a value but never used.","Identifier","unusedVar","'setTransitionDuration' is assigned a value but never used.","'annoyingAnimation' is assigned a value but never used.","'imageCanvas' is assigned a value but never used.","'oldImage' is assigned a value but never used.","'handleClickUndo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]